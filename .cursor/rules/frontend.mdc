---
alwaysApply: true
---
# 前端开发规范（uni-app）

> 本规范专注于 uni-app 多端开发特性，基础代码规范见 [项目开发规范](project.mdc)

## 技术栈

- **uni-app**：多端开发框架（微信小程序/H5/App）
- **Vue 3**：Composition API + `<script setup>`
- **TypeScript**：类型安全
- **Pinia**：状态管理
- **Sass**：样式预处理器

## 设计理念

### 极简复古风格（水墨风格）

**核心理念**：
- 色彩克制：深墨色 + 古铜金
- 留白为美：充分间距
- 结构清晰：卡片化布局
- 交互自然：简洁动画

**设计原则**：极简、响应式、一致性、可维护

## 项目结构

```
frontend/src/
├── api/          # API接口
├── components/   # 公共组件
├── pages/        # 页面
├── stores/       # Pinia状态
├── types/        # TypeScript类型
├── utils/        # 工具函数
├── styles/       # 全局样式（variables, mixins, common）
└── static/       # 静态资源
```

## 设计系统

### 核心颜色

```scss
// 主色
$primary: #2c3e50;        // 深墨色
$accent: #c9a87c;         // 古铜金

// 文字
$text-primary: #333333;
$text-secondary: #666666;
$text-tertiary: #999999;

// 背景
$bg-page: #f8f6f1;       // 宣纸黄
$bg-card: #ffffff;
$bg-hover: #f5f5f5;

// 边框
$border-color: #e8e6df;
```

### 字体与间距

```scss
// 字体大小（rpx，750px基准）
$font-xs: 24rpx;   // 12px
$font-sm: 26rpx;   // 13px
$font-base: 28rpx; // 14px（默认）
$font-lg: 32rpx;   // 16px
$font-xl: 36rpx;   // 18px

// 间距（8rpx基准）
$space-xs: 8rpx;
$space-sm: 16rpx;
$space-base: 24rpx;  // 默认
$space-md: 32rpx;
$space-lg: 40rpx;
$space-xl: 48rpx;

// 圆角
$radius-base: 12rpx;
$radius-lg: 16rpx;
$radius-round: 999rpx;
```

### 常用混入

```scss
// 布局
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// 文字
@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// 卡片
@mixin card-bordered {
  background: $bg-card;
  border-radius: $radius-base;
  border: 1rpx solid $border-color;
  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.06);
}

// 按钮
@mixin btn-primary {
  @include flex-center;
  background: $primary;
  color: #ffffff;
  border-radius: $radius-round;
  transition: all 0.3s;
  
  &:active {
    opacity: 0.9;
    transform: scale(0.98);
  }
}
```

## 页面结构规范

### 标准页面模板

```vue
<template>
  <view class="page-name">
    <!-- 内容区域 -->
    <view class="content">
      <view class="section-card">
        <view class="section-title">标题</view>
        <!-- 内容 -->
      </view>
    </view>
  </view>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { useUserStore } from '@/stores'

// Props定义
interface Props {
  title: string
  value?: string
}
const props = withDefaults(defineProps<Props>(), {
  value: ''
})

// Events定义
const emit = defineEmits<{
  change: [value: string]
}>()

// 响应式数据
const loading = ref(false)
</script>

<style scoped lang="scss">
@import '@/styles/variables.scss';
@import '@/styles/mixins.scss';

.page-name {
  min-height: 100vh;
  background: $bg-page;
}

.content {
  padding: $space-base;
}

.section-card {
  @include card-bordered;
  padding: $space-lg;
}
</style>
```

### 组件设计原则

1. **单一职责**：一个组件只做一件事
2. **Props向下，Events向上**
3. **TypeScript约束**：明确类型
4. **样式隔离**：使用 `scoped`

### 交互状态

```scss
// 按钮交互
.button {
  transition: all 0.3s;
  
  &:active {
    opacity: 0.9;
    transform: scale(0.98);
  }
  
  &.disabled {
    opacity: 0.5;
    pointer-events: none;
  }
}

// 列表项
.list-item {
  &:active {
    background: $bg-hover;
  }
}
```

## API封装规范

```typescript
// api/request.ts - 统一请求
export const request = <T>(options: UniApp.RequestOptions): Promise<T> => {
  return new Promise((resolve, reject) => {
    uni.request({
      ...options,
      url: BASE_URL + options.url,
      header: { 
        'Authorization': `Bearer ${token}`,
        ...options.header 
      },
      success: (res) => {
        if (res.data.code === 0) {
          resolve(res.data.data)
        } else {
          reject(res.data)
        }
      },
      fail: reject
    })
  })
}

// api/chat.ts - 模块化API
export const chatApi = {
  sendMessage: (id: string, content: string) => 
    request({ url: '/api/v1/chat/message', method: 'POST', data: { id, content } })
}
```

## Pinia状态管理

```typescript
// stores/user.ts
export const useUserStore = defineStore('user', () => {
  const user = ref<User | null>(null)
  const token = ref('')
  const isLogin = computed(() => !!token.value)
  
  const login = async (code: string) => {
    const data = await authApi.wxLogin(code)
    token.value = data.token
    user.value = data.user
  }
  
  return { user, token, isLogin, login }
})
```

## 多端兼容规范

### 条件编译

```vue
<template>
  <!-- #ifdef MP-WEIXIN -->
  <button open-type="getUserInfo">微信登录</button>
  <!-- #endif -->
  <!-- #ifdef H5 -->
  <button @click="h5Login">H5登录</button>
  <!-- #endif -->
</template>

<script setup lang="ts">
// #ifdef MP-WEIXIN
uni.login({ provider: 'weixin' })
// #endif
</script>
```

### 平台工具

```typescript
// utils/storage.ts
export const storage = {
  set: (k: string, v: any) => uni.setStorageSync(k, JSON.stringify(v)),
  get: <T>(k: string): T | null => JSON.parse(uni.getStorageSync(k) || 'null'),
  remove: (k: string) => uni.removeStorageSync(k)
}
```

## 性能优化

```vue
<!-- 虚拟列表（>50条数据） -->
<view v-for="msg in messages.slice(0, 50)" :key="msg.id">
  {{ msg.content }}
</view>

<!-- 图片懒加载 -->
<image :src="url" lazy-load mode="aspectFit" />
```

```typescript
// 防抖（输入框500ms）
export const debounce = (fn: Function, delay: number) => {
  let timer: number | null = null
  return (...args: any[]) => {
    if (timer) clearTimeout(timer)
    timer = setTimeout(() => fn(...args), delay)
  }
}
```

## 错误处理

```vue
<script setup lang="ts">
const loading = ref(false)
const error = ref<string | null>(null)

const loadData = async () => {
  loading.value = true
  error.value = null
  try {
    await api.getData()
  } catch (e: any) {
    error.value = e.message
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <view v-if="loading" class="loading-state">
    <text>加载中...</text>
  </view>
  
  <view v-else-if="error" class="error-state">
    <text>{{ error }}</text>
  </view>
  
  <view v-else class="content">
    <!-- 正常内容 -->
  </view>
</template>
```

## 小程序规范

### 生命周期

```vue
<script setup lang="ts">
import { onLoad, onShow, onHide } from '@dcloudio/uni-app'

onLoad((options) => {
  if (options?.id) loadData(options.id)
})

onShow(() => {
  refreshData()
})
</script>
```

### TabBar配置

```json
// pages.json
{
  "tabBar": {
    "color": "#8c8c8c",
    "selectedColor": "#c9a87c",
    "list": [
      {
        "pagePath": "pages/session/index",
        "text": "会话",
        "iconPath": "static/tabbar/session.png",
        "selectedIconPath": "static/tabbar/session-active.png"
      }
    ]
  }
}
```

**注意**：TabBar图标仅支持 `.png/.jpg/.jpeg`，建议81×81像素。

## 最佳实践清单

### 设计
- ✅ 遵循极简复古风格
- ✅ 使用统一的设计变量
- ✅ 卡片化布局，充分留白
- ✅ 交互动画简洁（0.2-0.3s）

### 代码
- ✅ TypeScript类型完整
- ✅ 使用Sass变量和混入
- ✅ 组件props/emits定义清晰
- ✅ 异常处理完善（loading + error）
- ✅ 多端兼容性验证

### 性能
- ✅ 列表使用虚拟滚动（>50条）
- ✅ 图片使用懒加载
- ✅ 输入框使用防抖（500ms）
- ✅ 避免模板中复杂计算

### 测试
- ✅ 微信小程序真机测试
- ✅ 不同屏幕尺寸适配
- ✅ 清除缓存后测试

## 常见问题

### 1. TabBar图标不显示
- 清除缓存：工具 → 清除缓存
- 确认图标格式为PNG
- 重新编译

### 2. 输入框向左延伸遮挡按钮
```scss
.input-container {
  display: flex;
  gap: $space-md;
}

.input-field {
  flex: 1;
  width: 0;  // 关键：约束宽度
}
```

### 3. 左滑操作DOM报错
```typescript
// 先执行业务逻辑，再关闭滑动状态
async function handlePin(id: string) {
  // 先执行操作
  pinnedIds.value = ...
  storage.set('pinned', pinnedIds.value)
  
  // 操作完成后关闭
  await nextTick()
  swipingId.value = null
}
```

---

**文档版本**：v5.0  
**最后更新**：2025-10-23  
**行数**：约450行（精简版）
