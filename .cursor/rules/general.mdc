---
alwaysApply: false
---
# 开发原则

## 核心哲学

- **KISS**：保持简单，不做多余设计。  
- **DRY**：避免重复，提取共用逻辑。  
- **YAGNI**：不要实现暂时不需要的功能。  
- **SoC**：关注点分离，分层解耦。

---

## SOLID 原则

1. **S** - 单一职责：一个类只做一件事。  
2. **O** - 开闭原则：对扩展开放，对修改关闭。  
3. **L** - 里氏替换：子类可替代父类。  
4. **I** - 接口隔离：小接口优于大接口。  
5. **D** - 依赖倒置：依赖抽象，不依赖实现。

---

## 代码质量

- **整洁代码**：命名清晰、函数简短、删除死代码。  
- **可测试性**：模块独立、避免隐藏状态。  
- **不可变性**：少副作用，提高并发安全。  
- **组合优于继承**：降低复杂度。

---

## 架构与工程

- 模块化设计，高内聚、低耦合。  
- 依赖注入，减少强依赖。  
- 错误处理明确，信息可追踪。  
- 持续集成（CI/CD），保证质量。

---

## 团队协作

- 代码审查：一致性 > 个性。  
- 版本控制：小步提交，清晰信息。  
- 文档与注释：必要且简洁。  
- 自动化测试：确保稳定交付。

---

## 性能与安全

- **先正确，再优化**。  
- **数据驱动优化**（Profiling）。  
- **安全设计**：输入验证、最小权限、无硬编码。

---

