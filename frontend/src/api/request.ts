/**
 * APIËØ∑Ê±ÇÂ∞ÅË£Ö
 */
import { storage } from '@/utils/storage'
import type { ApiResponse } from '@/types'

const BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000'

interface RequestOptions {
  url: string
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE'
  data?: any
  header?: any
  needAuth?: boolean
}

/**
 * Áªü‰∏ÄËØ∑Ê±ÇÊñπÊ≥ï
 */
export async function request<T = any>(options: RequestOptions): Promise<T> {
  const { url, method = 'GET', data, header = {}, needAuth = true } = options

  // Ê∑ªÂä†ËÆ§ËØÅtoken
  if (needAuth) {
    const token = storage.getToken()
    if (token) {
      header['Authorization'] = `Bearer ${token}`
    }
  }

  // ÂºÄÂèëÁéØÂ¢ÉÊâìÂç∞ËØ∑Ê±Ç‰ø°ÊÅØ
  console.log('üöÄ APIËØ∑Ê±Ç:', method, url, data)

  return new Promise((resolve, reject) => {
    uni.request({
      url: `${BASE_URL}${url}`,
      method,
      data,
      header: {
        'Content-Type': 'application/json',
        ...header
      },
      success: (res) => {
        console.log('üì• APIÂìçÂ∫î:', res.statusCode, url, res.data)
        
        if (res.statusCode === 200) {
          resolve(res.data as T)
        } else if (res.statusCode === 401 || res.statusCode === 403) {
          // TokenËøáÊúüÊàñÊú™ËÆ§ËØÅÔºåË∑≥ËΩ¨ÁôªÂΩï
          storage.clear()
          uni.reLaunch({
            url: '/pages/login/index'
          })
          reject(new Error('ÁôªÂΩïÂ∑≤ËøáÊúüÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï'))
        } else if (res.statusCode === 402) {
          // Token‰ΩôÈ¢ù‰∏çË∂≥
          uni.showModal({
            title: 'ÊèêÁ§∫',
            content: 'Token‰ΩôÈ¢ù‰∏çË∂≥ÔºåËØ∑ÂÖÖÂÄº',
            confirmText: 'ÂéªÂÖÖÂÄº',
            success: (res) => {
              if (res.confirm) {
                uni.navigateTo({
                  url: '/pages/recharge/index'
                })
              }
            }
          })
          reject(new Error('Token‰ΩôÈ¢ù‰∏çË∂≥'))
        } else {
          // Â∞ùËØï‰ªéÂìçÂ∫î‰∏≠ÊèêÂèñÈîôËØØ‰ø°ÊÅØ
          const errorMsg = (res.data as any)?.detail || (res.data as any)?.message || 'ËØ∑Ê±ÇÂ§±Ë¥•'
          console.error('‚ùå APIÈîôËØØ:', res.statusCode, errorMsg, res.data)
          uni.showToast({
            title: errorMsg,
            icon: 'none',
            duration: 3000
          })
          reject(new Error(errorMsg))
        }
      },
      fail: (err) => {
        console.error('‚ùå ÁΩëÁªúÈîôËØØ:', err)
        uni.showToast({
          title: 'ÁΩëÁªúÈîôËØØ',
          icon: 'none'
        })
        reject(err)
      }
    })
  })
}

/**
 * Â∞ÜÂØπË±°ËΩ¨Êç¢‰∏∫Êü•ËØ¢Â≠óÁ¨¶‰∏≤ÔºàÂÖºÂÆπÂæÆ‰ø°Â∞èÁ®ãÂ∫èÔºâ
 */
function objectToQueryString(obj: any): string {
  if (!obj || Object.keys(obj).length === 0) {
    return ''
  }
  
  return Object.keys(obj)
    .filter(key => obj[key] !== undefined && obj[key] !== null)
    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)
    .join('&')
}

/**
 * GETËØ∑Ê±Ç
 */
export function get<T = any>(url: string, data?: any): Promise<T> {
  const queryString = data ? objectToQueryString(data) : ''
  const finalUrl = queryString ? `${url}?${queryString}` : url
  
  return request<T>({
    url: finalUrl,
    method: 'GET'
  })
}

/**
 * POSTËØ∑Ê±Ç
 */
export function post<T = any>(url: string, data?: any): Promise<T> {
  return request<T>({
    url,
    method: 'POST',
    data
  })
}

/**
 * PUTËØ∑Ê±Ç
 */
export function put<T = any>(url: string, data?: any): Promise<T> {
  return request<T>({
    url,
    method: 'PUT',
    data
  })
}

/**
 * DELETEËØ∑Ê±Ç
 */
export function del<T = any>(url: string): Promise<T> {
  return request<T>({
    url,
    method: 'DELETE'
  })
}

